<!-- Only logged-in users can access this view. -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tic Tac Toe - Home</title>
    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css'>
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'>
    <style type='text/css'>
      body {
        background-image: url('https://ak.picdn.net/shutterstock/videos/21184336/thumb/1.jpg');
        background-size: 100%;
      }
      /* TOP BAR*/
      ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #3A5795;
      }
      li {
        float: right;
      }
      li a {
        display: block !important;
        color: white !important;
        text-align: center !important;
        padding: 14px 16px !important;
        text-decoration: none !important;
      }
      li a:hover {
        background-color: #111;
      }
      /* GAME SESSION */
      .board {
        margin: auto;
        width: 490px;
      }
      .board button {
        height: 150px;
        width: 150px;
        float: left;
        margin: 5px;
        font-size: 3em;
      }
      #message {
        font-size: 2rem;
        margin: 10px auto;
        text-align: center;
      }
    </style>
</head>
<body>
  <ul>
      <li style='float: left;'><a href='/home'>TIC TAC TOE</a></li>
      <li><a href='/api/logout' data-toggle='tooltip' data-placement='bottom' title='Logout'>
        <i class='fa fa-sign-out' style='color: white; font-size: 20px;'></i>
      </a></li>
    </ul>

    <div id='message'>Hello, <b style='color:blue'><%= name %></b>! Waiting for an opponent...</div>

    <div class='board'>
      <button id='r0c0'></button> <button id='r0c1'></button> <button id='r0c2'></button>
      <button id='r1c0'></button> <button id='r1c1'></button> <button id='r1c2'></button>
      <button id='r2c0'></button> <button id='r2c1'></button> <button id='r2c2'></button>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js'></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script type='text/javascript'>
      let myTurn = true;
      let symbol;
      let finish = false;
      let match = false;

      //LOGOUT TOOLTIP (WHEN MOUSE HOVER, DISPLAY THE LOGOUT LABEL WITH SPEECH BUBBLE LAYOUT)
      $(document).ready(function(){
        $('[data-toggle=\'tooltip\']').tooltip();
      });

      //CONNECT TO SOCKET AND GET USER NAME WHICH STORED IN SESSION (PASS FROM HOME CONTROLLER)
      const url = window.location.origin;
      const socket = io.connect( `${url}?name=${<%- JSON.stringify(name) %>}`);

      //RETURN 'boardState' OBJECT CONTAINS 9 CELLS ATTRIBUTES ID (r0c0, r0c1, ..., r2c2)
      //AND THEIR VALUES ('X', 'O' or '')
      //boardState = { boardbutton.id : boardbutton.text }
      const getBoardState = () => {
        try {
          const boardState = {};
          $(".board button").each(function() {
            boardState[$(this).attr("id")] = $(this).text() || "";
          });
          return boardState;
        }
        catch (error) {
          throw new Error(`getBoardState Error: ${error.message}`);
        }
      };

      //CALLING getBoardState FUNCTION
      //AND INSERT ALL POSSIBLE CELL MATCHES WITH ATTRIBUTE VALUES INTO 'rows' ARRAY
      //AND COUNT THE TOTAL CLICKED CELLS, IF count=9 RETURN TRUE
      //AND RETURN 'xbool'||'ybool' DETERMINE IF THERE HAS xxx, ooo MATCHED
      const isGameOver = () => {
        try {
          const state = getBoardState();
          const rows = [
            state.r0c0 + state.r0c1 + state.r0c2, // 1st line (-)
            state.r1c0 + state.r1c1 + state.r1c2, // 2nd line (-)
            state.r2c0 + state.r2c1 + state.r2c2, // 3rd line (-)
            state.r0c0 + state.r1c0 + state.r2c0, // 1st column (|)
            state.r0c1 + state.r1c1 + state.r2c1, // 2nd column (|)
            state.r0c2 + state.r1c2 + state.r2c2, // 3rd column (|)
            state.r0c0 + state.r1c1 + state.r2c2, // Primary diagonal (\)
            state.r0c2 + state.r1c1 + state.r2c0  // Secondary diagonal (/)
          ];
          const xbool = rows.includes('XXX');
          const obool = rows.includes('OOO');
          let count = 0;
          $(".board button").each(function() {
            if($(this).text()!== "")
              count ++;
          });
          match = xbool || obool;
          finish = count == 9 && !match;

          //IF MATCHED, CALLING highlightCells FUNCTION AND HIGHLIGHT THE WINNER'S 3 CELLS
          if(match){
            let index = 0;
            if(xbool)
              index = rows.indexOf('XXX');
            else
              index = rows.indexOf('OOO');
            highlightCells(rows, index);
          }

          return match || finish;
        }
        catch (error) {
          throw new Error(`IsGameOver Error: ${error.message}`);
        }
      };

      //LOOP ALL 9 CELLS AND SEE IF THE CELL ID = MATCHED CELL ID, CHANGE THE CELL'S TEXT TO BLUE
      const highlightCells = (rows, index) => {
        try {
          const rowId = [
            ['r0c0', 'r0c1', 'r0c2'],
            ['r1c0', 'r1c1', 'r1c2'],
            ['r2c0', 'r2c1', 'r2c2'],
            ['r0c0', 'r1c0', 'r2c0'],
            ['r0c1', 'r1c1', 'r2c1'],
            ['r0c2', 'r1c2', 'r2c2'],
            ['r0c0', 'r1c1', 'r2c2'],
            ['r0c2', 'r1c1', 'r2c0']
          ];
          for(let i = 0; i < 3; i++){
            $(".board button").each(function() {
              if($(this).attr("id") === rowId[index][i])
                $(this).html(`<text style='color:blue'>${$(this).text()}</text>`);
            });
          }
        }
        catch (error) {
        throw new Error(`HighlightCells Error: ${error.message}`);
        }
      };

      //IF myTurn = false MEANS NOT THE CURRENT CLIENT'S TURN, RETURN NO ACTION
      //IF THE CELL HAS ATTRIBUTE VALUE, RETURN NO ACTION
      //SENT TO CURRENT CLIENT, CLIENT'S SOCKET'S EVENT NAME 'make.move'
      //AND PASS SYMBOL AND POSITION (CELL ATTRIBUTE ID)
      const makeMove = (position) => {
        try {
          if (!myTurn) return;
          if ($(this).text().length) return; //validate
          socket.emit('make.move', {symbol, position,});
        } catch (error) {
          throw new Error(`MakeMove Error: ${error.message}`);
        }
      };

      //IF NOT THE CURRENT CLIENT'S TURN, DISPLAY OPPONENT LEAVE MESSAGE AND DISABLE THE BOARD
      //IF YES, DISPLAY YOUR TURN MESSAGE AND ENABLE THE BOARD AND DISABLE CLICKED CELLS
      const renderTurnMessage = (opponentName) => {
        try {
          if (!myTurn) {
            $('#message').html(`Your opponent <b style='color:blue'>${opponentName}</b>'s turn`);
            $('.board button').attr('disabled', true);
          } else {
            $('#message').text('Your turn');
            $('.board button').removeAttr('disabled');
            $(".board button").each(function() {
              if ($(this).text().length)
                $(this).attr('disabled', true);
            });
          }
        } catch (error) {
          throw new Error(`RenderTurnMessage Error: ${error.message}`);
        }
      };

      //DISABLE BOARD AT THE BEGINNING
      //AND CALLING THE makeMove FUNCTION WHEN PLAYER CLICK BUTTON WITH IT'S CELL ATTRIBUTE ID
      $(function() {
        $('.board button').attr('disabled', true);
        $('.board button').click(function() {
          makeMove($(this).attr('id'));
        });
      });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'game.begin'
      //AND CALLING renderTurnMessage FUNCTION WITH OPPONENT NAME
      //WHERE symbol SET TO X, myTurn SET TO true, IF THE RECEIVED SYMBOL is X
      //myTurn symbol SET TO O, myTurn SET TO false, IF THE RECEIVED SYMBOL is O
      //MEANS THE GAME WILL BEGIN FROM PLAYER WITH SYMBOL X SINCE myTurn SET TO true IN THE BEGINNING
      socket.on('game.begin', ({ symbol: symbolSign, opponentName }) => {
        symbol = symbolSign;
        myTurn = symbol === 'X';
        renderTurnMessage(opponentName);
      });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'move.made'
      //RECEIVED data = data.symbol, data.position, data.opponentName
      //CHANGE TURN (IF PLAYER'S SYMBOL != CURRENT SYMBOL THEN myTurn IS TRUE)
      //CALLING isGameOver FUNCTION
      //IF RETURN FALSE, CALLING renderTurnMessage FUNCTION WITH OPPONENT NAME
      //IF RETURN TRUE, myTurn TRUE SIDE WILL LOSE, FALSE SIDE WILL WIN
      //THEN DISABLE BOARD AND DISPLAY WINDOW MESSAGE
      socket.on('move.made', (data) => {
        $("#" + data.position).text(data.symbol);
        myTurn = data.symbol !== symbol;
        if (!isGameOver()) {
          renderTurnMessage(data.opponentName);
        } else {
          if(finish) {
            $('#message').html(`<b style='color:blue'>Draw!</b>`);
          }
          else{
            if (myTurn) {
              $('#message').html(`You <b style='color:blue'>lose</b>!`);
            } else {
              $('#message').html(`You <b style='color:blue'>win</b>!`);
            }
          }
          $(".board button").attr("disabled", true);
          setTimeout(() => {
            if (window.confirm('Play again?')) location.reload();
          }, 3000);
        }
      });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'opponent.left'
      //AND DISPLAY MESSAGE AND DISABLE THE BOARD
      socket.on('opponent.left', ({ opponentName }) => {
        $('#message').html(`Your opponent <b style='color:blue'>${opponentName}</b> left the game`);
        $('.board button').attr('disabled', true);
      });
    </script>

</body>
</html>

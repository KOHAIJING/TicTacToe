<!-- When logged-in users clicked to play game and play with players. -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tic Tac Toe - Game</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <style type="text/css">
      body {
        background-image: url("https://ak.picdn.net/shutterstock/videos/21184336/thumb/1.jpg");
        background-size: 100%;
      }
      /* ALERT MESSAGES FOR INVITE OPPONENT*/
      .alert {
        text-align: center;
        margin-top: 10px;
      }
      /* TOP BAR*/
      #topbar {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #3A5795;
      }
      #topbar li {
        float: right;
      }
      #topbar li a {
        display: block !important;
        color: white !important;
        text-align: center !important;
        padding: 14px 16px !important;
        text-decoration: none !important;
      }
      #topbar li a:hover {
        background-color: #111;
      }
      /* MESSAGE SESSION */
      #message {
        font-size: 2rem;
        margin: 10px auto;
        text-align: center;
      }
      /* GAME SESSION */
      .board {
        margin: auto;
        width: 490px;
      }
      .board button {
        height: 150px;
        width: 150px;
        float: left;
        margin: 5px;
        font-size: 3em;
      }
      /* Chat Box */
      .form-container {
        display: block;
        background-color: white;
        width: 300px;
        height: 500px;
        padding: 10px;
        margin: 30px auto;
      }
      .label-container {
        background: #f1f1f1;
        border: 1px solid grey;
        height: 290px;
        width: 100%;
        padding: 5px;
        overflow: scroll;
      }
      .form-container input {
        background: #f1f1f1;
        border: none;
        height: 40px;
        width: 100%;
        padding: 5px;
        margin: 10px 0 10px 0;
        overflow: scroll;
      }
      /* CHAT MESSAGES */
      #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      #messages li {
        padding: 5px 10px;
      }
      .form-container textarea:focus {
        background-color: #ddd;
        outline: none;
      }
      .form-container .btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
      }
      /* MODAL BACKGROUND */
      .modal {
        display: none; /* Hidden by default */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        align-items: center;
        justify-content: center;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      }
      #myModal2 {
        display: block; /* Display by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 150px; /* Location of the box */
        left: 0;
        top: 0;
        align-items: center;
        justify-content: center;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
      }
      /* MODAL CONTENT */
      .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        margin-top: 50px;
        width: 50%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
      }
      .modal-body {
        padding: 30px 30px;
        text-align: center;
        font-size: 1em;
      }
      #modalBody button {
        color: black;
        background-color: #ADD8E6;
        margin: 5%;
      }
      #resultModalBody button {
        color: black;
        background-color:#ADD8E6;
        margin-bottom: 5px;
      }
      .modal-body button:hover {
        font-weight: bold;
      }
      /* MODAL ANIMATION */
      @-webkit-keyframes animatetop {
        from {top:-300px; opacity:0}
        to {top:0; opacity:1}
      }
      @keyframes animatetop {
        from {top:-300px; opacity:0}
        to {top:0; opacity:1}
      }
      /* MODAL TABLE */
      .table {
        margin: 0 10%;
      }
      .table tr {
        text-align: left;
      }
    </style>
</head>
<body>
    <ul id="topbar">
      <li style="float: left;"><a href="/home">TIC TAC TOE</a></li>
      <li><a href="/api/logout" data-toggle="tooltip" data-placement="bottom" title="Logout">
        <i class="fa fa-sign-out" style="color: white; font-size: 20px;"></i>
      </a></li>
    </ul>

    <div class="row">
      <div class="col-xs-7 col-md-7">
        <div id="message">Waiting for an opponent...</div>
        <div class="board">
          <button id="r0c0"></button> <button id="r0c1"></button> <button id="r0c2"></button>
          <button id="r1c0"></button> <button id="r1c1"></button> <button id="r1c2"></button>
          <button id="r2c0"></button> <button id="r2c1"></button> <button id="r2c2"></button>
        </div>
      </div>
      <div class="col-xs-5 col-md-5">
        <form action="/gameWithPlayer" metohd="POST" id="chatForm" class="form-container">
          <p style="text-align:center;">Chat</p>
          <div class="label-container"><ul id="messages"></ul></div>
          <input id="txt" placeholder="Type message..."></input>
          <button id="chatSubmitButton" type="submit" class="btn">Send</button>
        </form>
      </div>
    </div>

    <!-- MODAL DISPLAY WHEN GAME END -->
    <div id="myModal" class="modal">
      <div class="modal-content">
        <div id="resultModalBody" class="modal-body">
          <table class="table table-borderless">
            <tbody>
              <tr> <td style="width:40%">Your Name: </td> <td style="width:60%; color:blue;"><%= name %></td> </tr>
              <tr> <td style="width:40%">Opponent Name: </td> <td id="displayOpponentName" style="width:60%; color:blue;"></td> </tr>
              <tr> <td style="width:40%">Your Result: </td> <td id="displayResult" style="width:60%; color:blue;"></td> </tr>
              <tr> <td style="width:40%">Your Percentage: </td> <td id="displayPercentage" style="width:60%; color:blue;"></td> </tr>
              <tr> <td style="width:40%">Your Total Win: </td> <td id="displayTotalWin" style="width:60%; color:blue;"></td> </tr>
              <tr> <td style="width:40%">Your Total Played: </td> <td id="displayTotalPlayed" style="width:60%; color:blue;"></td> </tr>
            </tbody>
          </table>
          <div>
          <br>
          <button id="rechallenge" onclick="rechallengeFunction()">Rechallenge With Same Opponent</button>
          <button id="challengeOthers" onclick="location.reload();">Challenge With Other Opponent</button>
          <button id="challengeAI" onclick="location.replace('/gameWithAI');">Challenge With AI (Practice)</button>
          <button id="quitGame" onclick="location.replace('/menu');">Quit The Game Session</button>
        </div>
      </div>
    </div>
  </div>

  <!-- MODAL DISPLAY BEFORE GAME START -->
  <div id="myModal2">
    <div class="modal-content">
      <div id="modalBody" class="modal-body">
        <button id="inviteOpponent" onclick="inviteOpponent()">Invite Opponent</button>
        <button id="randomOpponent" onclick="randomOpponent()">Random Opponent</button>
      </div>
  </div>
  </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script type="text/javascript">
      let myTurn = true;
      let symbol;
      let finish = false;
      let match = false;
      let gameResult = '';

      //LOGOUT TOOLTIP (WHEN MOUSE HOVER, DISPLAY THE LOGOUT LABEL WITH SPEECH BUBBLE LAYOUT)
      $(document).ready(function() {
        $('[data-toggle=\'tooltip\']').tooltip();
      });

      //CONNECT TO SOCKET, GET USER ID AND NAME WHICH STORED IN SESSION (PASS FROM HOME CONTROLLER)
      const url = window.location.origin;
      const socket = io.connect( `${url}?clientId=${<%- JSON.stringify(clientId) %>}&name=${<%- JSON.stringify(name) %>}`);

      //SUBMIT CHAT MESSAGE WITHOUT RELOAD PAGE
      //AND SEND INPUT CHAT MESSAGE TO SOCKET EVENT NAME 'chat.message'
        $('form').submit(function(e){
            e.preventDefault(); // prevents page reloading
            if(document.getElementById('txt').value !=''){
              socket.emit('chat.message', $('#txt').val());
            }
            $('#txt').val('');
            return false;
        });

      //WHEN USER CLICK INVITE OPPONENT BUTTON, DISPLAY MODAL CONTENT TO LET USER ENTER INVITEE EMAIL
      const inviteOpponent = () =>  {
        const html = `<p>Enter invitee's email:</p>
        <input type="email" id="email" class="form-control" placeholder="Email" required>
        <div id="errorMessage" class="alert alert-danger" role="alert" style="display: none;"></div>
        <button type="button" class="btn btn-default" style="background-color:#90EE90;" onclick="inviteHandler()">Invite</button>
        <button type="button" class="btn btn-default" onclick="backHandler()">Back</button>`;
        document.getElementById('modalBody').innerHTML = html;
      }

      //WHEN USER CLICK INVITE, SEND INPUT VALUE TO SOCKET EVENT NAME 'invite.opponent' AND HIDE THE MODAL
      function inviteHandler() {
        let inputEmail = document.getElementById('email').value;
        socket.emit('invite.opponent', inputEmail);
      }

      //WHEN USER CLICK BACK
      function backHandler() {
        const html = `<button id="inviteOpponent" onclick="inviteOpponent()">Invite Opponent</button>
        <button id="randomOpponent" onclick="randomOpponent()">Random Opponent</button>`;
        document.getElementById('modalBody').innerHTML = html;
      }

      //WHEN USER CLICK RANDOM OPPONENT BUTTON,
      //SEND TO CURRENT CLIENT, CLIENT'S SOCKET'S EVENT NAME 'random.opponent'
      //AND PASS CONFIRM MSG TO CURRENT CLIENT
      const randomOpponent = () =>  {
        try {
          let status = true;
          socket.emit('random.opponent', status);
          document.getElementById('myModal2').style.display = 'none';
        } catch (error) {
          throw new Error(`RechallengeFunction Error: ${error.message}`);
        }
      }

      //DISABLE BOARD AT THE BEGINNING
      //AND CALLING THE makeMove FUNCTION WHEN PLAYER CLICK BUTTON WITH IT'S CELL ATTRIBUTE ID
      $(function() {
        $('#txt').attr('disabled', true);
        $('#chatSubmitButton').attr('disabled', true);
        $('.board button').attr('disabled', true);
        $('.board button').click(function() {
          makeMove($(this).attr('id'));
        });
      });

      //IF NOT THE CURRENT CLIENT'S TURN, DISPLAY OPPONENT LEAVE MESSAGE AND DISABLE THE BOARD
      //IF YES, DISPLAY YOUR TURN MESSAGE AND ENABLE THE BOARD AND DISABLE CLICKED CELLS
      const renderTurnMessage = (opponentName) => {
        try {
          if (!myTurn) {
            $('#message').html(`Your opponent <b style='color:blue'>${opponentName}</b>'s turn`);
            $('.board button').attr('disabled', true);
          }
          else {
            $('#message').text('Your turn');
            $('.board button').removeAttr('disabled');
            $('.board button').each(function() {
              if ($(this).text().length)
                $(this).attr('disabled', true);
            });
          }
        }
        catch (error) {
          throw new Error(`RenderTurnMessage Error: ${error.message}`);
        }
      };

      //IF myTurn = false MEANS NOT THE CURRENT CLIENT'S TURN, RETURN NO ACTION
      //IF THE CELL HAS ATTRIBUTE VALUE, RETURN NO ACTION
      //SENT TO CURRENT CLIENT, CLIENT'S SOCKET'S EVENT NAME 'make.move'
      //AND PASS SYMBOL AND POSITION (CELL ATTRIBUTE ID)
      const makeMove = (position) => {
        try {
          if (!myTurn) return;
          if ($(this).text().length) return; //validate
          socket.emit('make.move', { symbol, position });

        }
        catch (error) {
          throw new Error(`MakeMove Error: ${error.message}`);
        }
      };

      //RETURN 'boardState' OBJECT CONTAINS 9 CELLS ATTRIBUTES ID (r0c0, r0c1, ..., r2c2)
      //AND THEIR VALUES ('X', 'O' or '')
      //boardState = { boardbutton.id : boardbutton.text }
      const getBoardState = () => {
        try {
          const boardState = {};
          $('.board button').each(function() {
            boardState[$(this).attr('id')] = $(this).text() || '';
          });
          return boardState;
        }
        catch (error) {
          throw new Error(`GetBoardState Error: ${error.message}`);
        }
      };

      //CALLING getBoardState FUNCTION
      //AND INSERT ALL POSSIBLE CELL MATCHES WITH ATTRIBUTE VALUES INTO 'rows' ARRAY
      //AND COUNT THE TOTAL CLICKED CELLS, IF count=9 RETURN TRUE
      //AND RETURN 'xbool'||'ybool' DETERMINE IF THERE HAS xxx, ooo MATCHED
      const isGameOver = () => {
        try {
          const state = getBoardState();
          const rows = [
            state.r0c0 + state.r0c1 + state.r0c2, // 1st line (-)
            state.r1c0 + state.r1c1 + state.r1c2, // 2nd line (-)
            state.r2c0 + state.r2c1 + state.r2c2, // 3rd line (-)
            state.r0c0 + state.r1c0 + state.r2c0, // 1st column (|)
            state.r0c1 + state.r1c1 + state.r2c1, // 2nd column (|)
            state.r0c2 + state.r1c2 + state.r2c2, // 3rd column (|)
            state.r0c0 + state.r1c1 + state.r2c2, // Primary diagonal (\)
            state.r0c2 + state.r1c1 + state.r2c0  // Secondary diagonal (/)
          ];
          const xbool = rows.includes('XXX');
          const obool = rows.includes('OOO');
          let count = 0;
          $('.board button').each(function() {
            if ($(this).text()!== '')
              count ++;
          });
          match = xbool || obool;
          finish = count == 9 && !match;

          //IF MATCHED, CALLING highlightCells FUNCTION AND HIGHLIGHT THE WINNER'S 3 CELLS
          if (match) {
            let index = 0;
            if (xbool)
              index = rows.indexOf('XXX');
            else
              index = rows.indexOf('OOO');
            highlightCells(rows, index);
          }

          return match || finish;
        }
        catch (error) {
          throw new Error(`IsGameOver Error: ${error.message}`);
        }
      };

      //LOOP ALL 9 CELLS AND SEE IF THE CELL ID = MATCHED CELL ID, CHANGE THE CELL'S TEXT TO BLUE
      const highlightCells = (rows, index) => {
        try {
          const rowId = [
            ['r0c0', 'r0c1', 'r0c2'],
            ['r1c0', 'r1c1', 'r1c2'],
            ['r2c0', 'r2c1', 'r2c2'],
            ['r0c0', 'r1c0', 'r2c0'],
            ['r0c1', 'r1c1', 'r2c1'],
            ['r0c2', 'r1c2', 'r2c2'],
            ['r0c0', 'r1c1', 'r2c2'],
            ['r0c2', 'r1c1', 'r2c0']
          ];
          for (let i = 0; i < 3; i++) {
            $('.board button').each(function() {
              if ($(this).attr('id') === rowId[index][i])
                $(this).html(`<text style='color:blue'>${$(this).text()}</text>`);
            });
          }
        }
        catch (error) {
        throw new Error(`HighlightCells Error: ${error.message}`);
        }
      };

      //WHEN USER CLICK RECHALLENGE BUTTON,
      //SEND TO CURRENT CLIENT, CLIENT'S SOCKET'S EVENT NAME 'request.rechallenge'
      //AND PASS CONFIRM MSG TO CURRENT CLIENT
      const rechallengeFunction = () => {
        try {
          let reqMessage = 'Your opponent request for rechallenge, accept?';
          socket.emit('request.rechallenge', reqMessage);
        } catch (error) {
        throw new Error(`RechallengeFunction Error: ${error.message}`);
        }
      }

      //RECEIVE FROM OPPONENT'S SOCKET, EVENT NAME 'rechallenge.request'
      //AND POP OUT WINDOW TO CONFIRM RECHALLENGE
      //IF CONFIRM, SEND TO CURRENT CLIENT'S SOCKET, SOCKET'S EVENT NAME 'restart.game'
      //AND PASS REQUEST MSG TO CURRENT CLIENT
      socket.on('rechallenge.request', (reqMessage) => {
        if (window.confirm(reqMessage)) {
          socket.emit('restart.game', reqMessage);
        }
      });

      //RECEIVE FROM CLIENT'S SOCKET, EVENT NAME 'display.error' AND DISPLAY ERROR MESSAGE FOR INVITATION
      socket.on('display.error', (err) => {
        inviteOpponent();
        document.getElementById('myModal2').style.display = 'block';
        document.getElementById('errorMessage').style.display = 'block';
        document.getElementById('errorMessage').innerHTML = err;
      });

      //RECEIVE FROM CLIENT'S SOCKET, EVENT NAME 'waiting.accept' AND DISPLAY WAITING MESSAGE
      socket.on('waiting.accept', (waitingMessage) => {
        const html = `<h5>${waitingMessage}</h5>`;
        document.getElementById('modalBody').innerHTML = html;
      });

      //RECEIVE FROM INVITATION OWNER'S SOCKET, EVENT NAME 'request.invitation'
      //AND POP OUT WINDOW TO ACCEPT INVITATION
      //IF ACCEPT, SEND TO CURRENT CLIENT'S SOCKET, SOCKET'S EVENT NAME 'accept.invitation'
      //AND PASS INVITATION OWNER'S SOCKET ID
      //IF REJECT, SEND TO CURRENT CLIENT'S SOCKET, SOCKET'S EVENT NAME 'reject.invitation'
      //AND PASS INVITATION OWNER'S SOCKET ID
      socket.on('request.invitation', (obj) => {
        if (window.confirm(obj.reqMessage)) {
          socket.emit('accept.invitation', obj.id);
        }
        else {
          socket.emit('reject.invitation', obj.id);
        }
      });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'game.begin'
      //AND CALLING renderTurnMessage FUNCTION WITH OPPONENT NAME
      //WHERE symbol SET TO X, myTurn SET TO true, IF THE RECEIVED SYMBOL is X
      //symbol SET TO O, myTurn SET TO false, IF THE RECEIVED SYMBOL is O
      //MEANS THE GAME WILL BEGIN FROM PLAYER WITH SYMBOL X SINCE myTurn SET TO true IN THE BEGINNING
      //WHEN RESTART GAME, HIDE THE MODAL MESSAGE AND SET ALL CELLS' TEXT TO NONE AND ENABLE BOARD IF myTurn
      socket.on('game.begin', ({ symbol: symbolSign, opponentName }) => {
        symbol = symbolSign;
        myTurn = symbol === 'X';
        finish = false;
        match = false;
        gameResult = '';
        renderTurnMessage(opponentName);
        document.getElementById('myModal').style.display = 'none';
        document.getElementById('myModal2').style.display = 'none';
        $('#txt').removeAttr('disabled');
        $('#chatSubmitButton').removeAttr('disabled');
        $('.board button').each(function() {
           $(this).text('');
        });
        if (myTurn)
          $('.board button').removeAttr('disabled');
      });

      //DISPLAY CHAT MESSAGE AFTER RECEIVE SOCKET EVENT NAME 'chat.message'
      socket.on('chat.message', (obj) => {
        const chat = '<strong>' + obj.name + '</strong>: ' + obj.message;
        if(obj.name == <%- JSON.stringify(name) %>)
          $('#messages').prepend($('<li style="background-color: #E6E6FA;">').html(chat));
        else
          $('#messages').prepend($('<li style="background-color: #FFF0F5;">').html(chat));
      });
      //DISPLAY CONNECTION MESSAGE AFTER RECEIVE SOCKET EVENT NAME 'is_online'
      socket.on('connection.status', (name) => {
          $('#messages').prepend($('<li>').html(name));
      });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'move.made'
      //RECEIVED data = data.symbol, data.position, data.opponentName
      //CHANGE TURN (IF PLAYER'S SYMBOL != CURRENT SYMBOL THEN myTurn IS TRUE)
      //CALLING isGameOver FUNCTION
      //IF RETURN FALSE, CALLING renderTurnMessage FUNCTION WITH OPPONENT NAME
      //IF RETURN TRUE, myTurn TRUE SIDE WILL LOSE, FALSE SIDE WILL WIN
      //THEN DISABLE BOARD AND DISPLAY MODAL MESSAGE
      socket.on('move.made', (data) => {
        let opponentName = data.opponentName;
        $('#' + data.position).text(data.symbol);
        myTurn = data.symbol !== symbol;
        if (!isGameOver()) {
          renderTurnMessage(opponentName);
        }
        else {
          if (finish) {
            gameResult = 'DRAW';
          } else if (myTurn) {
            gameResult = 'LOSE';
          } else {
            gameResult = 'WIN';
          }
          $('#message').html(`You <b style='color:blue'>${gameResult}</b>!`);
          socket.emit('game.over', gameResult);
          socket.on('score.inserted', (score) => {
            $('#displayOpponentName').html(`${score.opponentName}`);
            $('#displayResult').html(`${score.gameResult}`);
            $('#displayPercentage').html(`${score.percentage} %`);
            $('#displayTotalWin').html(`${score.total_win}`);
            $('#displayTotalPlayed').html(`${score.total_played}`);
          });
          $('.board button').attr('disabled', true);
          setTimeout(() => {
            document.getElementById('myModal').style.display = 'block';
          }, 3000);
        }
        });

      //RECEIVE FROM CURRENT CLIENT'S SOCKET, EVENT NAME 'opponent.left'
      //AND DISPLAY MODAL MESSAGE, HIDDEN RECHALLENGE OPTION AND DISABLE THE BOARD
      socket.on('opponent.left', ({ opponentName }) => {
        $('#message').html(`Your opponent <b style='color:blue'>${opponentName}</b> left the game`);
        $('#rechallenge').attr('hidden', true);
        $('.board button').attr('disabled', true);
        $('#txt').attr('disabled', true);
        $('#chatSubmitButton').attr('disabled', true);
        setTimeout(() => {
          if (!match && !finish) {
            socket.emit('game.over', gameResult);
            socket.on('score.noupdate', (score) => {
              $('#displayResult').html(` ( Game Interrupted )`);
              $('#displayPercentage').html(`${score.percentage} %`);
              $('#displayTotalWin').html(`${score.total_win}`);
              $('#displayTotalPlayed').html(`${score.total_played}`);
            });
          }
          $('#displayOpponentName').html(`${opponentName} ( Your Opponent Left )`);
          document.getElementById('myModal').style.display = 'block';
          document.getElementById('myModal2').style.display = 'none';
        }, 1000);
      });

    </script>

</body>
</html>
